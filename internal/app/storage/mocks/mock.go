// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/storage/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/xbreathoflife/gophermart/internal/app/entities"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockStorage) GetBalance(ctx context.Context, login string) (*entities.BalanceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, login)
	ret0, _ := ret[0].(*entities.BalanceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorageMockRecorder) GetBalance(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorage)(nil).GetBalance), ctx, login)
}

// GetBalanceWithdrawalsForUser mocks base method.
func (m *MockStorage) GetBalanceWithdrawalsForUser(ctx context.Context, login string) ([]entities.BalanceWithdrawalsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceWithdrawalsForUser", ctx, login)
	ret0, _ := ret[0].([]entities.BalanceWithdrawalsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceWithdrawalsForUser indicates an expected call of GetBalanceWithdrawalsForUser.
func (mr *MockStorageMockRecorder) GetBalanceWithdrawalsForUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceWithdrawalsForUser", reflect.TypeOf((*MockStorage)(nil).GetBalanceWithdrawalsForUser), ctx, login)
}

// GetOrderIfExists mocks base method.
func (m *MockStorage) GetOrderIfExists(ctx context.Context, orderNum string) (*entities.OrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderIfExists", ctx, orderNum)
	ret0, _ := ret[0].(*entities.OrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderIfExists indicates an expected call of GetOrderIfExists.
func (mr *MockStorageMockRecorder) GetOrderIfExists(ctx, orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderIfExists", reflect.TypeOf((*MockStorage)(nil).GetOrderIfExists), ctx, orderNum)
}

// GetOrdersForUser mocks base method.
func (m *MockStorage) GetOrdersForUser(ctx context.Context, login string) ([]entities.OrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForUser", ctx, login)
	ret0, _ := ret[0].([]entities.OrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForUser indicates an expected call of GetOrdersForUser.
func (mr *MockStorageMockRecorder) GetOrdersForUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForUser", reflect.TypeOf((*MockStorage)(nil).GetOrdersForUser), ctx, login)
}

// GetUserBySessionIfExists mocks base method.
func (m *MockStorage) GetUserBySessionIfExists(ctx context.Context, session string) (*entities.UserSessionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySessionIfExists", ctx, session)
	ret0, _ := ret[0].(*entities.UserSessionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySessionIfExists indicates an expected call of GetUserBySessionIfExists.
func (mr *MockStorageMockRecorder) GetUserBySessionIfExists(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySessionIfExists", reflect.TypeOf((*MockStorage)(nil).GetUserBySessionIfExists), ctx, session)
}

// GetUserIfExists mocks base method.
func (m *MockStorage) GetUserIfExists(ctx context.Context, login string) (*entities.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIfExists", ctx, login)
	ret0, _ := ret[0].(*entities.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIfExists indicates an expected call of GetUserIfExists.
func (mr *MockStorageMockRecorder) GetUserIfExists(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIfExists", reflect.TypeOf((*MockStorage)(nil).GetUserIfExists), ctx, login)
}

// Init mocks base method.
func (m *MockStorage) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStorageMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStorage)(nil).Init), ctx)
}

// InsertNewBalance mocks base method.
func (m *MockStorage) InsertNewBalance(ctx context.Context, balance entities.BalanceModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewBalance indicates an expected call of InsertNewBalance.
func (mr *MockStorageMockRecorder) InsertNewBalance(ctx, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewBalance", reflect.TypeOf((*MockStorage)(nil).InsertNewBalance), ctx, balance)
}

// InsertNewBalanceWithdrawals mocks base method.
func (m *MockStorage) InsertNewBalanceWithdrawals(ctx context.Context, balanceWithdrawals entities.BalanceWithdrawalsModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewBalanceWithdrawals", ctx, balanceWithdrawals)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewBalanceWithdrawals indicates an expected call of InsertNewBalanceWithdrawals.
func (mr *MockStorageMockRecorder) InsertNewBalanceWithdrawals(ctx, balanceWithdrawals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewBalanceWithdrawals", reflect.TypeOf((*MockStorage)(nil).InsertNewBalanceWithdrawals), ctx, balanceWithdrawals)
}

// InsertNewOrder mocks base method.
func (m *MockStorage) InsertNewOrder(ctx context.Context, order entities.OrderModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewOrder indicates an expected call of InsertNewOrder.
func (mr *MockStorageMockRecorder) InsertNewOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewOrder", reflect.TypeOf((*MockStorage)(nil).InsertNewOrder), ctx, order)
}

// InsertNewUser mocks base method.
func (m *MockStorage) InsertNewUser(ctx context.Context, user entities.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockStorageMockRecorder) InsertNewUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockStorage)(nil).InsertNewUser), ctx, user)
}

// UpdateBalance mocks base method.
func (m *MockStorage) UpdateBalance(ctx context.Context, balance entities.BalanceModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockStorageMockRecorder) UpdateBalance(ctx, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockStorage)(nil).UpdateBalance), ctx, balance)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorage) UpdateOrderStatus(ctx context.Context, orderNum, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderNum, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockRecorder) UpdateOrderStatus(ctx, orderNum, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatus), ctx, orderNum, status)
}

// UpdateOrderStatusAndAccrual mocks base method.
func (m *MockStorage) UpdateOrderStatusAndAccrual(ctx context.Context, orderNum, status string, accrual float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusAndAccrual", ctx, orderNum, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusAndAccrual indicates an expected call of UpdateOrderStatusAndAccrual.
func (mr *MockStorageMockRecorder) UpdateOrderStatusAndAccrual(ctx, orderNum, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusAndAccrual", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatusAndAccrual), ctx, orderNum, status, accrual)
}

// UpdateUserSession mocks base method.
func (m *MockStorage) UpdateUserSession(ctx context.Context, userSession entities.UserSessionModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSession", ctx, userSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSession indicates an expected call of UpdateUserSession.
func (mr *MockStorageMockRecorder) UpdateUserSession(ctx, userSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSession", reflect.TypeOf((*MockStorage)(nil).UpdateUserSession), ctx, userSession)
}

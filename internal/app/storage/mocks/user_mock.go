// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/xbreathoflife/gophermart/internal/app/entities"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// GetUserBySessionIfExists mocks base method.
func (m *MockUserStorage) GetUserBySessionIfExists(ctx context.Context, session string) (*entities.UserSessionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySessionIfExists", ctx, session)
	ret0, _ := ret[0].(*entities.UserSessionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySessionIfExists indicates an expected call of GetUserBySessionIfExists.
func (mr *MockUserStorageMockRecorder) GetUserBySessionIfExists(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySessionIfExists", reflect.TypeOf((*MockUserStorage)(nil).GetUserBySessionIfExists), ctx, session)
}

// GetUserIfExists mocks base method.
func (m *MockUserStorage) GetUserIfExists(ctx context.Context, login string) (*entities.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIfExists", ctx, login)
	ret0, _ := ret[0].(*entities.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIfExists indicates an expected call of GetUserIfExists.
func (mr *MockUserStorageMockRecorder) GetUserIfExists(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIfExists", reflect.TypeOf((*MockUserStorage)(nil).GetUserIfExists), ctx, login)
}

// InsertNewUser mocks base method.
func (m *MockUserStorage) InsertNewUser(ctx context.Context, user entities.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockUserStorageMockRecorder) InsertNewUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockUserStorage)(nil).InsertNewUser), ctx, user)
}

// UpdateUserSession mocks base method.
func (m *MockUserStorage) UpdateUserSession(ctx context.Context, userSession entities.UserSessionModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSession", ctx, userSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSession indicates an expected call of UpdateUserSession.
func (mr *MockUserStorageMockRecorder) UpdateUserSession(ctx, userSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSession", reflect.TypeOf((*MockUserStorage)(nil).UpdateUserSession), ctx, userSession)
}
